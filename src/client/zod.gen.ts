// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zSetUserRolesCommand = z.object({
    roleUuids: z.array(z.string().uuid())
});

export const zPermission = z.enum([
    'all_permissions',
    'contact.create',
    'contact.read',
    'contact.update',
    'contact.delete',
    'event-log.read',
    'file.read',
    'file.create',
    'file.delete',
    'jobs.read.index',
    'jobs.read.detail',
    'notification.read.own',
    'notification.read.config',
    'notification.update.read',
    'notification.update.unread',
    'notification.preferences.update.channel',
    'notification.preferences.update.preset',
    'notification.preferences.update.types',
    'notification.preferences.read.own',
    'notification.migrate-type',
    'notification.send-test',
    'role.read',
    'role.create',
    'role.update',
    'role.delete',
    'role.cache.clear',
    'send_push_notification',
    'typesense',
    'user.read',
    'user.create',
    'user.update',
    'user.delete'
]);

export const zViewRoleDetailResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    name: z.string(),
    permissions: z.array(zPermission),
    isDefault: z.boolean(),
    isSystemAdmin: z.boolean()
});

export const zViewMeResponse = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    roles: z.array(zViewRoleDetailResponse)
});

export const zViewUserDetailResponse = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    roles: z.array(zViewRoleDetailResponse)
});

export const zPaginatedOffsetQuery = z.object({
    limit: z.number().gte(1).lte(100),
    offset: z.number().gte(0)
});

export const zUserIndexRoleView = z.object({
    uuid: z.string().uuid(),
    name: z.string()
});

export const zUserIndexView = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    roles: z.array(zUserIndexRoleView)
});

export const zPaginatedOffsetResponseMeta = z.object({
    total: z.number(),
    offset: z.number(),
    limit: z.number()
});

export const zViewUserIndexResponse = z.object({
    items: z.array(zUserIndexView),
    meta: zPaginatedOffsetResponseMeta
});

export const zViewPermissionIndexPermissionResponse = z.object({
    name: z.string(),
    key: zPermission,
    description: z.string()
});

export const zViewPermissionIndexGroupResponse = z.object({
    name: z.string(),
    permissions: z.array(zViewPermissionIndexPermissionResponse)
});

export const zViewPermissionIndexResponse = z.object({
    groups: z.array(zViewPermissionIndexGroupResponse)
});

export const zGetApiInfoResponse = z.object({
    environment: z.string(),
    commit: z.string(),
    version: z.string(),
    timestamp: z.string().datetime()
});

export const zCreateRoleCommand = z.object({
    name: z.string()
});

export const zCreateRoleResponse = z.object({
    uuid: z.string().uuid()
});

export const zClearRolePermissionsCacheCommand = z.object({
    roleUuids: z.union([
        z.array(z.string().uuid()),
        z.null()
    ]).optional()
});

export const zUpdateRoleCommand = z.object({
    name: z.string()
});

export const zRoleResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    name: z.string(),
    permissions: z.array(zPermission),
    isDefault: z.boolean(),
    isSystemAdmin: z.boolean()
});

export const zViewRoleIndexResponse = z.object({
    items: z.array(zRoleResponse)
});

export const zRoleNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'role_not_found'
    ])
});

export const zUpdateRolesPermissionsCommandItem = z.object({
    roleUuid: z.string().uuid(),
    permissions: z.array(zPermission)
});

export const zUpdateRolesPermissionsCommand = z.object({
    roles: z.array(zUpdateRolesPermissionsCommandItem)
});

export const zMimeType = z.enum([
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'text/plain',
    'text/html',
    'image/jpeg',
    'image/png',
    'image/tiff',
    'image/bmp',
    'image/heic',
    'image/webp',
    'image/gif'
]);

export const zCreateFileCommand = z.object({
    name: z.string(),
    mimeType: zMimeType
});

export const zCreateFileResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    mimeType: z.union([
        zMimeType,
        z.null()
    ]),
    uploadUrl: z.string()
});

export const zFileNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'file_not_found'
    ])
});

export const zCoordinatesCommand = z.object({
    longitude: z.number(),
    latitude: z.number()
});

export const zAddressCommand = z.object({
    country: z.union([
        z.string(),
        z.null()
    ]),
    city: z.union([
        z.string(),
        z.null()
    ]),
    postalCode: z.union([
        z.string(),
        z.null()
    ]),
    streetName: z.union([
        z.string(),
        z.null()
    ]),
    streetNumber: z.union([
        z.string(),
        z.null()
    ]),
    unit: z.union([
        z.string(),
        z.null()
    ]),
    coordinates: zCoordinatesCommand
});

/**
 * a ISO 4217 currency code
 */
export const zCurrency = z.enum([
    'AFN',
    'EUR',
    'ALL',
    'DZD',
    'USD',
    'AOA',
    'XCD',
    'ARS',
    'AMD',
    'AWG',
    'AUD',
    'AZN',
    'BSD',
    'BHD',
    'BDT',
    'BBD',
    'BYN',
    'BZD',
    'XOF',
    'BMD',
    'INR',
    'BTN',
    'BOB',
    'BOV',
    'BAM',
    'BWP',
    'NOK',
    'BRL',
    'BND',
    'BGN',
    'BIF',
    'CVE',
    'KHR',
    'XAF',
    'CAD',
    'KYD',
    'CLP',
    'CLF',
    'CNY',
    'COP',
    'COU',
    'KMF',
    'CDF',
    'NZD',
    'CRC',
    'CUP',
    'ANG',
    'CZK',
    'DKK',
    'DJF',
    'DOP',
    'EGP',
    'SVC',
    'ERN',
    'SZL',
    'ETB',
    'FKP',
    'FJD',
    'XPF',
    'GMD',
    'GEL',
    'GHS',
    'GIP',
    'GTQ',
    'GBP',
    'GNF',
    'GYD',
    'HTG',
    'HNL',
    'HKD',
    'HUF',
    'ISK',
    'IDR',
    'XDR',
    'IRR',
    'IQD',
    'ILS',
    'JMD',
    'JPY',
    'JOD',
    'KZT',
    'KES',
    'KPW',
    'KRW',
    'KWD',
    'KGS',
    'LAK',
    'LBP',
    'LSL',
    'ZAR',
    'LRD',
    'LYD',
    'CHF',
    'MOP',
    'MKD',
    'MGA',
    'MWK',
    'MYR',
    'MVR',
    'MRU',
    'MUR',
    'XUA',
    'MXN',
    'MXV',
    'MDL',
    'MNT',
    'MAD',
    'MZN',
    'MMK',
    'NAD',
    'NPR',
    'NIO',
    'NGN',
    'OMR',
    'PKR',
    'PAB',
    'PGK',
    'PYG',
    'PEN',
    'PHP',
    'PLN',
    'QAR',
    'RON',
    'RUB',
    'RWF',
    'SHP',
    'WST',
    'STN',
    'SAR',
    'RSD',
    'SCR',
    'SLE',
    'SGD',
    'XSU',
    'SBD',
    'SOS',
    'SSP',
    'LKR',
    'SDG',
    'SRD',
    'SEK',
    'CHE',
    'CHW',
    'SYP',
    'TWD',
    'TJS',
    'TZS',
    'THB',
    'TOP',
    'TTD',
    'TND',
    'TRY',
    'TMT',
    'UGX',
    'UAH',
    'AED',
    'USN',
    'UYU',
    'UYI',
    'UYW',
    'UZS',
    'VUV',
    'VES',
    'VED',
    'VND',
    'YER',
    'ZMW',
    'ZWG',
    'XBA',
    'XBB',
    'XBC',
    'XBD',
    'XTS',
    'XXX',
    'XAU',
    'XPD',
    'XPT',
    'XAG'
]);

export const zMonetaryDto = z.object({
    amount: z.number().int(),
    currency: zCurrency,
    precision: z.number().int()
});

export const zCreateContactCommand = z.object({
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    address: z.union([
        zAddressCommand,
        z.null()
    ]),
    fileUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    avatarUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    discount: z.union([
        zMonetaryDto,
        z.null()
    ]),
    balance: z.union([
        zMonetaryDto,
        z.null()
    ]),
    birthDate: z.string().date()
});

export const zCreateContactResponse = z.object({
    uuid: z.string().uuid()
});

export const zContactNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'contact_not_found'
    ])
});

export const zUpdateContactCommand = z.object({
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    isActive: z.boolean(),
    address: z.union([
        zAddressCommand,
        z.null()
    ]),
    fileUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    avatarUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    discount: z.union([
        zMonetaryDto,
        z.null()
    ]),
    balance: z.union([
        zMonetaryDto,
        z.null()
    ]),
    birthDate: z.string().date()
});

export const zCoordinatesResponse = z.object({
    longitude: z.number(),
    latitude: z.number()
});

export const zAddressResponse = z.object({
    country: z.union([
        z.string(),
        z.null()
    ]),
    city: z.union([
        z.string(),
        z.null()
    ]),
    postalCode: z.union([
        z.string(),
        z.null()
    ]),
    streetName: z.union([
        z.string(),
        z.null()
    ]),
    streetNumber: z.union([
        z.string(),
        z.null()
    ]),
    unit: z.union([
        z.string(),
        z.null()
    ]),
    coordinates: z.union([
        zCoordinatesResponse,
        z.null()
    ])
});

export const zFileResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    mimeType: z.union([
        zMimeType,
        z.null()
    ])
});

export const zPresignedFileVariantResponse = z.object({
    label: z.string(),
    url: z.string()
});

export const zPresignedFileResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    mimeType: z.union([
        zMimeType,
        z.null()
    ]),
    url: z.string(),
    variants: z.array(zPresignedFileVariantResponse)
});

export const zViewContactDetailResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    isActive: z.boolean(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    address: z.union([
        zAddressResponse,
        z.null()
    ]),
    file: z.union([
        zFileResponse,
        z.null()
    ]),
    avatar: z.union([
        zPresignedFileResponse,
        z.null()
    ]),
    discount: z.union([
        zMonetaryDto,
        z.null()
    ]),
    balance: z.union([
        zMonetaryDto,
        z.null()
    ]),
    birthDate: z.union([
        z.string().date(),
        z.null()
    ])
});

export const zViewContactIndexSortQueryKey = z.enum([
    'name'
]);

export const zSortDirection = z.enum([
    'asc',
    'desc'
]);

export const zViewContactIndexSortQuery = z.object({
    key: zViewContactIndexSortQueryKey,
    order: zSortDirection
});

export const zViewContactIndexFilterQuery = z.object({
    isActive: z.string().optional()
});

export const zContactResponse = z.object({
    uuid: z.string().uuid(),
    isActive: z.boolean(),
    name: z.string(),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    address: z.union([
        zAddressResponse,
        z.null()
    ])
});

export const zViewContactIndexResponse = z.object({
    items: z.array(zContactResponse),
    meta: zPaginatedOffsetResponseMeta
});

export const zUiTheme = z.enum([
    'light',
    'dark',
    'system'
]);

export const zLocale = z.enum([
    'en-US',
    'nl-BE'
]);

export const zFontSize = z.enum([
    'smaller',
    'small',
    'default',
    'large',
    'larger'
]);

export const zUpdateUiPreferencesCommand = z.object({
    theme: zUiTheme.optional(),
    language: zLocale.optional(),
    fontSize: zFontSize.optional(),
    showShortcuts: z.boolean().optional(),
    reduceMotion: z.boolean().optional(),
    highContrast: z.boolean().optional()
});

export const zViewUiPreferencesResponse = z.object({
    theme: zUiTheme,
    language: zLocale,
    fontSize: zFontSize,
    showShortcuts: z.boolean(),
    reduceMotion: z.boolean(),
    highContrast: z.boolean()
});

export const zCreateOneSignalTokenResponse = z.object({
    token: z.string(),
    userUuid: z.string().uuid()
});

export const zTranslations = z.object({
    nl: z.string().optional(),
    en: z.string().optional()
});

export const zSendPushNotificationCommand = z.object({
    name: z.string(),
    title: zTranslations,
    description: zTranslations,
    userUuids: z.array(z.string().uuid())
});

export const zSubjectType = z.enum([
    'contact',
    'file',
    'role',
    'user'
]);

export const zViewDomainEventLogIndexFilterQuery = z.object({
    subjectType: zSubjectType.optional(),
    subjectId: z.string().uuid().optional(),
    userUuid: z.string().uuid().optional()
});

export const zViewDomainEventLogIndexQueryKey = z.object({
    createdAt: z.string(),
    uuid: z.string().uuid()
});

export const zViewDomainEventLogIndexPaginationQuery = z.object({
    limit: z.number().gte(0).lte(100),
    key: z.union([
        zViewDomainEventLogIndexQueryKey,
        z.null()
    ]).optional()
});

export const zUserCreatedEventContent = z.object({
    userUuid: z.string().uuid()
});

export const zUserCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'user.created'
    ]),
    content: zUserCreatedEventContent
});

export const zRoleAssignedToUserEventContent = z.object({
    userUuid: z.string().uuid(),
    roleUuid: z.string().uuid()
});

export const zUserRoleAssignedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'user.role-assigned'
    ]),
    content: zRoleAssignedToUserEventContent
});

export const zRoleCreatedEventContent = z.object({
    roleUuid: z.string().uuid(),
    roleName: z.string()
});

export const zRoleCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'role.created'
    ]),
    content: zRoleCreatedEventContent
});

export const zRoleDeletedEventContent = z.object({
    roleUuid: z.string().uuid(),
    roleName: z.string()
});

export const zRoleDeletedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'role.deleted'
    ]),
    content: zRoleDeletedEventContent
});

export const zRoleRenamedEventContent = z.object({
    roleUuid: z.string().uuid(),
    previousName: z.string(),
    newName: z.string()
});

export const zRoleRenamedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'role.renamed'
    ]),
    content: zRoleRenamedEventContent
});

export const zRolePermissionsUpdatedEventContent = z.object({
    roleUuid: z.string().uuid(),
    newPermissions: z.array(zPermission),
    roleName: z.string()
});

export const zRolePermissionsUpdatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'role.permissions.updated'
    ]),
    content: zRolePermissionsUpdatedEventContent
});

export const zRolePermissionsCacheClearedEventContent = z.object({
    roleUuids: z.string().uuid()
});

export const zRolePermissionsCacheClearedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'role.permissions.cache.cleared'
    ]),
    content: zRolePermissionsCacheClearedEventContent
});

export const zNotificationType = z.enum([
    'user.created',
    'test-notification'
]);

export const zNotificationCreatedEventContent = z.object({
    uuid: z.string().uuid(),
    type: zNotificationType
});

export const zNotificationCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.created'
    ]),
    content: zNotificationCreatedEventContent
});

export const zNotificationChannel = z.enum([
    'email',
    'sms',
    'app',
    'push'
]);

export const zUserNotificationCreatedEventContent = z.object({
    notificationUuid: z.string().uuid(),
    channel: zNotificationChannel,
    userUuid: z.string().uuid()
});

export const zUserNotificationCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'user.notification.created'
    ]),
    content: zUserNotificationCreatedEventContent
});

export const zContactCreatedEventContent = z.object({
    contactUuid: z.string().uuid()
});

export const zContactCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'contact.created'
    ]),
    content: zContactCreatedEventContent
});

export const zContactUpdatedEventContent = z.object({
    contactUuid: z.string().uuid()
});

export const zContactUpdatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'contact.updated'
    ]),
    content: zContactUpdatedEventContent
});

export const zContactDeletedEventContent = z.object({
    contactUuid: z.string().uuid()
});

export const zContactDeletedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'contact.deleted'
    ]),
    content: zContactDeletedEventContent
});

export const zFileCreatedEventContent = z.object({
    fileUuid: z.string().uuid(),
    fileName: z.string()
});

export const zFileCreatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'file.created'
    ]),
    content: zFileCreatedEventContent
});

export const zFileUploadedEventContent = z.object({
    fileUuid: z.string().uuid(),
    fileName: z.string()
});

export const zFileUploadedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'file.uploaded'
    ]),
    content: zFileUploadedEventContent
});

export const zNotificationReadEventContent = z.object({
    notificationUuid: z.string().uuid(),
    userUuid: z.string().uuid()
});

export const zNotificationReadDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.read'
    ]),
    content: zNotificationReadEventContent
});

export const zNotificationUnreadEventContent = z.object({
    notificationUuid: z.string().uuid(),
    userUuid: z.string().uuid()
});

export const zNotificationUnreadDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.unread'
    ]),
    content: zNotificationUnreadEventContent
});

export const zNotificationPreset = z.enum([
    'all',
    'default',
    'custom',
    'none'
]);

export const zNotificationPreferencePresetEventContent = z.object({
    userUuid: z.string().uuid(),
    preset: zNotificationPreset
});

export const zNotificationPreferencePresetUpdatedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.preference.preset.updated'
    ]),
    content: zNotificationPreferencePresetEventContent
});

export const zNotificationTypesMigratedEventContent = z.object({
    types: z.array(zNotificationType)
});

export const zNotificationTypesMigratedDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.types.migrated'
    ]),
    content: zNotificationTypesMigratedEventContent
});

export const zTestNotificationSentEventContent = z.object({
    message: z.string()
});

export const zTestNotificationSentDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'test-notification.sent'
    ]),
    content: zTestNotificationSentEventContent
});

export const zAllNotificationsMarkedAsReadEventContent = z.object({
    userUuid: z.string().uuid()
});

export const zNotificationReadAllDomainEventLog = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'notification.read.all'
    ]),
    content: zAllNotificationsMarkedAsReadEventContent
});

export const zDomainEventLogResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    message: z.string(),
    subjectType: z.union([
        zSubjectType,
        z.null()
    ]),
    subjectId: z.union([
        z.string().uuid(),
        z.null()
    ])
});

export const zViewDomainEventLogIndexResponseMeta = z.object({
    next: z.union([
        zViewDomainEventLogIndexQueryKey,
        z.null()
    ])
});

export const zViewDomainEventLogIndexResponse = z.object({
    items: z.array(z.union([
        zUserCreatedDomainEventLog,
        zUserRoleAssignedDomainEventLog,
        zRoleCreatedDomainEventLog,
        zRoleDeletedDomainEventLog,
        zRoleRenamedDomainEventLog,
        zRolePermissionsUpdatedDomainEventLog,
        zRolePermissionsCacheClearedDomainEventLog,
        zNotificationCreatedDomainEventLog,
        zUserNotificationCreatedDomainEventLog,
        zContactCreatedDomainEventLog,
        zContactUpdatedDomainEventLog,
        zContactDeletedDomainEventLog,
        zFileCreatedDomainEventLog,
        zFileUploadedDomainEventLog,
        zNotificationReadDomainEventLog,
        zNotificationUnreadDomainEventLog,
        zNotificationPreferencePresetUpdatedDomainEventLog,
        zNotificationTypesMigratedDomainEventLog,
        zTestNotificationSentDomainEventLog,
        zNotificationReadAllDomainEventLog
    ])),
    meta: zViewDomainEventLogIndexResponseMeta
});

export const zGlobalSearchCollectionName = z.enum([
    'user',
    'contact'
]);

export const zSearchCollectionsFilterQuery = z.object({
    collections: z.array(zGlobalSearchCollectionName).optional()
});

export const zSearchCollectionUserResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    email: z.string().email()
});

export const zSearchCollectionContactResponse = z.object({
    uuid: z.string().uuid(),
    isActive: z.boolean(),
    name: z.string(),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    address: z.union([
        zAddressResponse,
        z.null()
    ])
});

export const zSearchCollectionsResponseItem = z.object({
    collection: zGlobalSearchCollectionName,
    entity: z.union([
        zSearchCollectionUserResponse,
        zSearchCollectionContactResponse
    ]),
    text_match: z.number()
});

export const zSearchCollectionsResponse = z.object({
    items: z.array(zSearchCollectionsResponseItem)
});

export const zPreferenceTypes = z.object({
    email: z.array(zNotificationType),
    sms: z.array(zNotificationType),
    app: z.array(zNotificationType),
    push: z.array(zNotificationType)
});

export const zGetMyNotificationPreferencesResponse = z.object({
    preset: zNotificationPreset,
    emailEnabled: z.boolean(),
    smsEnabled: z.boolean(),
    appEnabled: z.boolean(),
    pushEnabled: z.boolean(),
    preferences: zPreferenceTypes
});

export const zNotificationTypeChannelConfig = z.object({
    channel: zNotificationChannel,
    defaultValue: z.boolean(),
    isSupported: z.boolean()
});

export const zNotificationTypeConfig = z.object({
    type: zNotificationType,
    channelConfigs: z.array(zNotificationTypeChannelConfig)
});

export const zGetNotificationTypesConfigResponse = z.object({
    items: z.array(zNotificationTypeConfig)
});

export const zUpdateMyChannelNotificationPreferenceCommand = z.object({
    channel: zNotificationChannel,
    isEnabled: z.boolean()
});

export const zSendTestNotificationCommand = z.object({
    message: z.string()
});

export const zGetMyNotificationsFilterQuery = z.object({
    onlyUnread: z.string().optional()
});

export const zGetMyNotificationsQueryKey = z.object({
    createdAt: z.string(),
    notificationUuid: z.string().uuid()
});

export const zGetMyNotificationsPaginationQuery = z.object({
    limit: z.number().gte(0).lte(100),
    key: zGetMyNotificationsQueryKey.optional()
});

export const zCreatedByUserResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string()
});

export const zTestNotificationContent = z.object({
    message: z.string()
});

export const zTestNotificationNotification = z.object({
    createdAt: z.string().datetime(),
    readAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    notificationUuid: z.string().uuid(),
    createdByUser: z.union([
        zCreatedByUserResponse,
        z.null()
    ]),
    message: z.string(),
    type: z.enum([
        'test-notification'
    ]),
    meta: zTestNotificationContent
});

export const zGetMyNotificationsResponseMeta = z.object({
    next: z.union([
        zGetMyNotificationsQueryKey,
        z.null()
    ])
});

export const zGetMyNotificationsResponse = z.object({
    items: z.array(zTestNotificationNotification),
    meta: zGetMyNotificationsResponseMeta
});

export const zViewUnreadNotificationsCountResponse = z.object({
    amount: z.number().gte(0),
    exceedsLimit: z.boolean()
});

export const zUpdateMyNotificationTypePreferenceCommand = z.object({
    channel: zNotificationChannel,
    isEnabled: z.boolean(),
    types: z.array(zNotificationType)
});

export const zUserNotificationNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'user_notification_not_found'
    ])
});

export const zUpdateMyNotificationPreferencePresetCommand = z.object({
    preset: zNotificationPreset
});

export const zMigrationAlreadyPerformedErrorMeta = z.object({
    type: z.array(zNotificationType)
});

export const zMigrationAlreadyPerformedError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '400'
    ]),
    code: z.enum([
        'migration_already_performed'
    ]),
    meta: zMigrationAlreadyPerformedErrorMeta
});

export const zMigrateNotificationTypesCommand = z.object({
    types: z.array(zNotificationType)
});

export const zViewJobsIndexSortQueryKey = z.enum([
    'createdAt'
]);

export const zViewJobsIndexSortQuery = z.object({
    key: zViewJobsIndexSortQueryKey,
    order: zSortDirection
});

export const zQueueName = z.enum([
    'system'
]);

export const zViewJobsIndexFilterQuery = z.object({
    queueNames: z.array(zQueueName).optional(),
    archived: z.boolean().optional().default(false)
});

export const zViewJobsIndexQueryKey = z.object({
    createdAt: z.string().datetime().optional(),
    id: z.string()
});

export const zViewJobsIndexPaginationQuery = z.object({
    limit: z.number().gte(0).lte(100),
    key: z.union([
        zViewJobsIndexQueryKey,
        z.null()
    ]).optional()
});

export const zJobStatus = z.enum([
    'created',
    'active',
    'completed',
    'retry',
    'failed',
    'cancelled'
]);

export const zViewJobsIndexItemResponse = z.object({
    queueName: zQueueName,
    id: z.string().uuid(),
    name: z.string(),
    status: zJobStatus,
    createdAt: z.string().datetime(),
    completedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zViewJobsIndexResponseMeta = z.object({
    next: z.union([
        zViewJobsIndexQueryKey,
        z.null()
    ])
});

export const zViewJobsIndexResponse = z.object({
    items: z.array(zViewJobsIndexItemResponse),
    meta: zViewJobsIndexResponseMeta
});

export const zViewJobDetailResponse = z.object({
    id: z.string().uuid(),
    queueName: zQueueName,
    priority: z.number(),
    name: z.string(),
    data: z.object({}),
    status: zJobStatus,
    retryLimit: z.number(),
    retryCount: z.number(),
    retryDelay: z.number(),
    retryBackoff: z.boolean(),
    startAfter: z.string().datetime(),
    startedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    singletonKey: z.union([
        z.string(),
        z.null()
    ]),
    singletonOn: z.union([
        z.string().datetime(),
        z.null()
    ]),
    expireIn: z.object({}),
    createdAt: z.string().datetime(),
    completedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    keepUntil: z.string().datetime(),
    output: z.union([
        z.object({}),
        z.null()
    ]),
    deadLetter: z.union([
        z.string(),
        z.null()
    ]),
    policy: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetTodosSortQuery = z.object({
    key: z.enum([
        'deadline'
    ]),
    order: zSortDirection
});

export const zGetTodosResponseItem = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    deadline: z.union([
        z.string().datetime(),
        z.null()
    ]),
    completed: z.boolean()
});

export const zGetTodosResponse = z.object({
    items: z.array(zGetTodosResponseItem),
    meta: zPaginatedOffsetResponseMeta
});

export const zTodoNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'todo_not_found'
    ])
});

export const zGetTodoResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    deadline: z.union([
        z.string().datetime(),
        z.null()
    ]),
    completed: z.boolean()
});

export const zCreateTodoCommand = z.object({
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    deadline: z.union([
        z.string(),
        z.null()
    ])
});

export const zCreateTodoResponse = z.object({
    uuid: z.string().uuid()
});

export const zUpdateTodoCommand = z.object({
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    deadline: z.union([
        z.string(),
        z.null()
    ])
});

export const zInternalServerApiError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '500'
    ]),
    code: z.enum([
        'internal_server_error'
    ])
});

export const zMigrateCollectionsV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        collections: z.array(z.enum([
            'user',
            'contact'
        ])).optional(),
        fresh: z.boolean().optional()
    }).optional()
});

export const zImportCollectionsV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        collections: z.array(z.enum([
            'user',
            'contact'
        ])).optional()
    }).optional()
});

export const zViewCollectionsV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zSetUserRolesV1Data = z.object({
    body: zSetUserRolesCommand,
    path: z.object({
        user: z.string()
    }),
    query: z.never().optional()
});

export const zViewMeV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * User details retrieved
 */
export const zViewMeV1Response = zViewMeResponse;

export const zViewUserDetailV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        uuid: z.string()
    }),
    query: z.never().optional()
});

/**
 * User details retrieved
 */
export const zViewUserDetailV1Response = zViewUserDetailResponse;

export const zViewUserIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        pagination: zPaginatedOffsetQuery.optional(),
        search: z.string().optional()
    }).optional()
});

/**
 * Users retrieved
 */
export const zViewUserIndexV1Response = zViewUserIndexResponse;

export const zViewPermissionIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zViewPermissionIndexV1Response = zViewPermissionIndexResponse;

export const zSwaggerData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zGetApiInfoData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * API info retrieved
 */
export const zGetApiInfoResponse2 = zGetApiInfoResponse;

export const zViewRoleIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * The roles has been successfully received.
 */
export const zViewRoleIndexV1Response = zViewRoleIndexResponse;

export const zUpdateRolesPermissionsV1Data = z.object({
    body: zUpdateRolesPermissionsCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zUpdateRolesPermissionsV1Response = z.void();

export const zCreateRoleV1Data = z.object({
    body: zCreateRoleCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateRoleV1Response = zCreateRoleResponse;

export const zClearRolePermissionsCacheV1Data = z.object({
    body: zClearRolePermissionsCacheCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zClearRolePermissionsCacheV1Response = z.void();

export const zDeleteRoleV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        role: z.string()
    }),
    query: z.never().optional()
});

export const zDeleteRoleV1Response = z.void();

export const zViewRoleDetailV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        role: z.string()
    }),
    query: z.never().optional()
});

/**
 * The role has been successfully received.
 */
export const zViewRoleDetailV1Response = zViewRoleDetailResponse;

export const zUpdateRoleV1Data = z.object({
    body: zUpdateRoleCommand,
    path: z.object({
        role: z.string()
    }),
    query: z.never().optional()
});

export const zCreateFileV1Data = z.object({
    body: zCreateFileCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateFileV1Response = zCreateFileResponse;

export const zConfirmFileUploadV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        file: z.string()
    }),
    query: z.never().optional()
});

export const zDownloadFileV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        file: z.string()
    }),
    query: z.never().optional()
});

export const zViewContactIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        pagination: zPaginatedOffsetQuery.optional(),
        sort: z.array(zViewContactIndexSortQuery).optional(),
        filter: zViewContactIndexFilterQuery.optional(),
        search: z.string().optional()
    }).optional()
});

export const zViewContactIndexV1Response = zViewContactIndexResponse;

export const zCreateContactV1Data = z.object({
    body: zCreateContactCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateContactV1Response = zCreateContactResponse;

export const zDeleteContactV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        uuid: z.string()
    }),
    query: z.never().optional()
});

export const zDeleteContactV1Response = z.void();

export const zViewContactDetailV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        uuid: z.string()
    }),
    query: z.never().optional()
});

export const zViewContactDetailV1Response = zViewContactDetailResponse;

export const zUpdateContactV1Data = z.object({
    body: zUpdateContactCommand,
    path: z.object({
        uuid: z.string()
    }),
    query: z.never().optional()
});

export const zUpdateContactV1Response = z.void();

export const zViewUiPreferencesV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zViewUiPreferencesV1Response = zViewUiPreferencesResponse;

export const zUpdateUiPreferencesV1Data = z.object({
    body: zUpdateUiPreferencesCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateOneSignalTokenV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateOneSignalTokenV1Response = zCreateOneSignalTokenResponse;

export const zSendPushNotificationV1Data = z.object({
    body: zSendPushNotificationCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zViewDomainEventLogIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        filter: zViewDomainEventLogIndexFilterQuery.optional(),
        pagination: zViewDomainEventLogIndexPaginationQuery.optional()
    }).optional()
});

export const zViewDomainEventLogIndexV1Response = zViewDomainEventLogIndexResponse;

export const zSearchCollectionsV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        filter: zSearchCollectionsFilterQuery,
        search: z.string()
    })
});

export const zSearchCollectionsV1Response = zSearchCollectionsResponse;

export const zGetMyNotificationPreferencesV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zGetMyNotificationPreferencesV1Response = zGetMyNotificationPreferencesResponse;

export const zGetNotificationTypesConfigV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zGetNotificationTypesConfigV1Response = zGetNotificationTypesConfigResponse;

export const zUpdateMyChannelNotificationPreferenceV1Data = z.object({
    body: zUpdateMyChannelNotificationPreferenceCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zUpdateMyChannelNotificationPreferenceV1Response = z.void();

export const zSendTestNotificationV1Data = z.object({
    body: zSendTestNotificationCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zSendTestNotificationV1Response = z.void();

export const zGetMyNotificationsV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        filter: zGetMyNotificationsFilterQuery.optional(),
        pagination: zGetMyNotificationsPaginationQuery.optional()
    }).optional()
});

export const zGetMyNotificationsV1Response = zGetMyNotificationsResponse;

export const zViewUnreadNotificationsCountV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zViewUnreadNotificationsCountV1Response = zViewUnreadNotificationsCountResponse;

export const zViewUserNotificationDetailV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        notificationUuid: z.string()
    }),
    query: z.never().optional()
});

export const zViewUserNotificationDetailV1Response = zTestNotificationNotification;

export const zMarkAllNotificationAsReadV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zMarkAllNotificationAsReadV1Response = z.void();

export const zUpdateMyNotificationTypePreferenceV1Data = z.object({
    body: zUpdateMyNotificationTypePreferenceCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zUpdateMyNotificationTypePreferenceV1Response = z.void();

export const zMarkNotificationAsReadV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        notificationUuid: z.string()
    }),
    query: z.never().optional()
});

export const zMarkNotificationAsReadV1Response = z.void();

export const zMarkNotificationAsUnreadV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        notificationUuid: z.string()
    }),
    query: z.never().optional()
});

export const zMarkNotificationAsUnreadV1Response = z.void();

export const zUpdateMyNotificationPreferencePresetV1Data = z.object({
    body: zUpdateMyNotificationPreferencePresetCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zUpdateMyNotificationPreferencePresetV1Response = z.void();

export const zMigrateNotificationTypesV1Data = z.object({
    body: zMigrateNotificationTypesCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zMigrateNotificationTypesV1Response = z.void();

export const zViewJobsIndexV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        sort: z.array(zViewJobsIndexSortQuery).optional(),
        filter: zViewJobsIndexFilterQuery.optional(),
        pagination: zViewJobsIndexPaginationQuery.optional()
    }).optional()
});

export const zViewJobsIndexV1Response = zViewJobsIndexResponse;

export const zViewJobDetailV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        jobId: z.string()
    }),
    query: z.object({
        isArchived: z.boolean()
    })
});

export const zViewJobDetailV1Response = zViewJobDetailResponse;

export const zGetTodosV1Data = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        pagination: zPaginatedOffsetQuery.optional(),
        sort: z.array(zGetTodosSortQuery).optional()
    }).optional()
});

export const zGetTodosV1Response = zGetTodosResponse;

export const zCreateTodoV1Data = z.object({
    body: zCreateTodoCommand,
    path: z.never().optional(),
    query: z.never().optional()
});

export const zCreateTodoV1Response = zCreateTodoResponse;

export const zDeleteTodoV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        todoUuid: z.string()
    }),
    query: z.never().optional()
});

export const zGetTodosV12Data = z.object({
    body: z.never().optional(),
    path: z.object({
        todoUuid: z.string()
    }),
    query: z.never().optional()
});

export const zGetTodosV12Response = zGetTodoResponse;

export const zUpdateTodoV1Data = z.object({
    body: zUpdateTodoCommand,
    path: z.object({
        todoUuid: z.string()
    }),
    query: z.never().optional()
});

export const zCheckTodoV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        todoUuid: z.string()
    }),
    query: z.never().optional()
});

export const zUncheckTodoV1Data = z.object({
    body: z.never().optional(),
    path: z.object({
        todoUuid: z.string()
    }),
    query: z.never().optional()
});