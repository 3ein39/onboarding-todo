// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { MigrateCollectionsV1Data, MigrateCollectionsV1Responses, MigrateCollectionsV1Errors, ImportCollectionsV1Data, ImportCollectionsV1Responses, ImportCollectionsV1Errors, ViewCollectionsV1Data, ViewCollectionsV1Responses, ViewCollectionsV1Errors, SetUserRolesV1Data, SetUserRolesV1Errors, ViewMeV1Data, ViewMeV1Responses, ViewMeV1Errors, ViewUserDetailV1Data, ViewUserDetailV1Responses, ViewUserDetailV1Errors, ViewUserIndexV1Data, ViewUserIndexV1Responses, ViewUserIndexV1Errors, ViewPermissionIndexV1Data, ViewPermissionIndexV1Responses, ViewPermissionIndexV1Errors, SwaggerData, SwaggerResponses, SwaggerErrors, GetApiInfoData, GetApiInfoResponses, GetApiInfoErrors, ViewRoleIndexV1Data, ViewRoleIndexV1Responses, ViewRoleIndexV1Errors, UpdateRolesPermissionsV1Data, UpdateRolesPermissionsV1Responses, UpdateRolesPermissionsV1Errors, CreateRoleV1Data, CreateRoleV1Responses, CreateRoleV1Errors, ClearRolePermissionsCacheV1Data, ClearRolePermissionsCacheV1Responses, ClearRolePermissionsCacheV1Errors, DeleteRoleV1Data, DeleteRoleV1Responses, DeleteRoleV1Errors, ViewRoleDetailV1Data, ViewRoleDetailV1Responses, ViewRoleDetailV1Errors, UpdateRoleV1Data, UpdateRoleV1Responses, UpdateRoleV1Errors, CreateFileV1Data, CreateFileV1Responses, CreateFileV1Errors, ConfirmFileUploadV1Data, ConfirmFileUploadV1Responses, ConfirmFileUploadV1Errors, DownloadFileV1Data, DownloadFileV1Errors, ViewContactIndexV1Data, ViewContactIndexV1Responses, ViewContactIndexV1Errors, CreateContactV1Data, CreateContactV1Responses, CreateContactV1Errors, DeleteContactV1Data, DeleteContactV1Responses, DeleteContactV1Errors, ViewContactDetailV1Data, ViewContactDetailV1Responses, ViewContactDetailV1Errors, UpdateContactV1Data, UpdateContactV1Responses, UpdateContactV1Errors, ViewUiPreferencesV1Data, ViewUiPreferencesV1Responses, ViewUiPreferencesV1Errors, UpdateUiPreferencesV1Data, UpdateUiPreferencesV1Responses, UpdateUiPreferencesV1Errors, CreateOneSignalTokenV1Data, CreateOneSignalTokenV1Responses, CreateOneSignalTokenV1Errors, SendPushNotificationV1Data, SendPushNotificationV1Responses, SendPushNotificationV1Errors, ViewDomainEventLogIndexV1Data, ViewDomainEventLogIndexV1Responses, ViewDomainEventLogIndexV1Errors, SearchCollectionsV1Data, SearchCollectionsV1Responses, SearchCollectionsV1Errors, GetMyNotificationPreferencesV1Data, GetMyNotificationPreferencesV1Responses, GetMyNotificationPreferencesV1Errors, GetNotificationTypesConfigV1Data, GetNotificationTypesConfigV1Responses, GetNotificationTypesConfigV1Errors, UpdateMyChannelNotificationPreferenceV1Data, UpdateMyChannelNotificationPreferenceV1Responses, UpdateMyChannelNotificationPreferenceV1Errors, SendTestNotificationV1Data, SendTestNotificationV1Responses, SendTestNotificationV1Errors, GetMyNotificationsV1Data, GetMyNotificationsV1Responses, GetMyNotificationsV1Errors, ViewUnreadNotificationsCountV1Data, ViewUnreadNotificationsCountV1Responses, ViewUnreadNotificationsCountV1Errors, ViewUserNotificationDetailV1Data, ViewUserNotificationDetailV1Responses, ViewUserNotificationDetailV1Errors, MarkAllNotificationAsReadV1Data, MarkAllNotificationAsReadV1Responses, MarkAllNotificationAsReadV1Errors, UpdateMyNotificationTypePreferenceV1Data, UpdateMyNotificationTypePreferenceV1Responses, UpdateMyNotificationTypePreferenceV1Errors, MarkNotificationAsReadV1Data, MarkNotificationAsReadV1Responses, MarkNotificationAsReadV1Errors, MarkNotificationAsUnreadV1Data, MarkNotificationAsUnreadV1Responses, MarkNotificationAsUnreadV1Errors, UpdateMyNotificationPreferencePresetV1Data, UpdateMyNotificationPreferencePresetV1Responses, UpdateMyNotificationPreferencePresetV1Errors, MigrateNotificationTypesV1Data, MigrateNotificationTypesV1Responses, MigrateNotificationTypesV1Errors, ViewJobsIndexV1Data, ViewJobsIndexV1Responses, ViewJobsIndexV1Errors, ViewJobDetailV1Data, ViewJobDetailV1Responses, ViewJobDetailV1Errors } from './types.gen';
import { zMigrateCollectionsV1Data, zImportCollectionsV1Data, zViewCollectionsV1Data, zSetUserRolesV1Data, zViewMeV1Data, zViewMeV1Response, zViewUserDetailV1Data, zViewUserDetailV1Response, zViewUserIndexV1Data, zViewUserIndexV1Response, zViewPermissionIndexV1Data, zViewPermissionIndexV1Response, zSwaggerData, zGetApiInfoData, zGetApiInfoResponse2, zViewRoleIndexV1Data, zViewRoleIndexV1Response, zUpdateRolesPermissionsV1Data, zUpdateRolesPermissionsV1Response, zCreateRoleV1Data, zCreateRoleV1Response, zClearRolePermissionsCacheV1Data, zClearRolePermissionsCacheV1Response, zDeleteRoleV1Data, zDeleteRoleV1Response, zViewRoleDetailV1Data, zViewRoleDetailV1Response, zUpdateRoleV1Data, zUpdateRoleV1Response, zCreateFileV1Data, zCreateFileV1Response, zConfirmFileUploadV1Data, zConfirmFileUploadV1Response, zDownloadFileV1Data, zViewContactIndexV1Data, zViewContactIndexV1Response, zCreateContactV1Data, zCreateContactV1Response, zDeleteContactV1Data, zDeleteContactV1Response, zViewContactDetailV1Data, zViewContactDetailV1Response, zUpdateContactV1Data, zUpdateContactV1Response, zViewUiPreferencesV1Data, zViewUiPreferencesV1Response, zUpdateUiPreferencesV1Data, zCreateOneSignalTokenV1Data, zCreateOneSignalTokenV1Response, zSendPushNotificationV1Data, zViewDomainEventLogIndexV1Data, zViewDomainEventLogIndexV1Response, zSearchCollectionsV1Data, zSearchCollectionsV1Response, zGetMyNotificationPreferencesV1Data, zGetMyNotificationPreferencesV1Response, zGetNotificationTypesConfigV1Data, zGetNotificationTypesConfigV1Response, zUpdateMyChannelNotificationPreferenceV1Data, zUpdateMyChannelNotificationPreferenceV1Response, zSendTestNotificationV1Data, zSendTestNotificationV1Response, zGetMyNotificationsV1Data, zGetMyNotificationsV1Response, zViewUnreadNotificationsCountV1Data, zViewUnreadNotificationsCountV1Response, zViewUserNotificationDetailV1Data, zViewUserNotificationDetailV1Response, zMarkAllNotificationAsReadV1Data, zMarkAllNotificationAsReadV1Response, zUpdateMyNotificationTypePreferenceV1Data, zUpdateMyNotificationTypePreferenceV1Response, zMarkNotificationAsReadV1Data, zMarkNotificationAsReadV1Response, zMarkNotificationAsUnreadV1Data, zMarkNotificationAsUnreadV1Response, zUpdateMyNotificationPreferencePresetV1Data, zUpdateMyNotificationPreferencePresetV1Response, zMigrateNotificationTypesV1Data, zMigrateNotificationTypesV1Response, zViewJobsIndexV1Data, zViewJobsIndexV1Response, zViewJobDetailV1Data, zViewJobDetailV1Response } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const migrateCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<MigrateCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MigrateCollectionsV1Responses, MigrateCollectionsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zMigrateCollectionsV1Data.parseAsync(data);
        },
        url: '/api/v1/typesense/migrate',
        ...options
    });
};

export const importCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<ImportCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ImportCollectionsV1Responses, ImportCollectionsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zImportCollectionsV1Data.parseAsync(data);
        },
        url: '/api/v1/typesense/import',
        ...options
    });
};

export const viewCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewCollectionsV1Responses, ViewCollectionsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewCollectionsV1Data.parseAsync(data);
        },
        url: '/api/v1/typesense/collections',
        ...options
    });
};

export const setUserRolesV1 = <ThrowOnError extends boolean = true>(options: Options<SetUserRolesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SetUserRolesV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zSetUserRolesV1Data.parseAsync(data);
        },
        url: '/api/v1/users/{user}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const viewMeV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewMeV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewMeV1Responses, ViewMeV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewMeV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewMeV1Response.parseAsync(data);
        },
        url: '/api/v1/users/me',
        ...options
    });
};

export const viewUserDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewUserDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewUserDetailV1Responses, ViewUserDetailV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewUserDetailV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewUserDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/users/{uuid}',
        ...options
    });
};

export const viewUserIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewUserIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewUserIndexV1Responses, ViewUserIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewUserIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewUserIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/users',
        ...options
    });
};

export const viewPermissionIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewPermissionIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewPermissionIndexV1Responses, ViewPermissionIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewPermissionIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewPermissionIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/permissions',
        ...options
    });
};

export const swagger = <ThrowOnError extends boolean = true>(options?: Options<SwaggerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SwaggerResponses, SwaggerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zSwaggerData.parseAsync(data);
        },
        url: '/api/oauth2-redirect',
        ...options
    });
};

export const getApiInfo = <ThrowOnError extends boolean = true>(options?: Options<GetApiInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiInfoResponses, GetApiInfoErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiInfoData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetApiInfoResponse2.parseAsync(data);
        },
        url: '/api',
        ...options
    });
};

export const viewRoleIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewRoleIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewRoleIndexV1Responses, ViewRoleIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewRoleIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewRoleIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/roles',
        ...options
    });
};

export const updateRolesPermissionsV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateRolesPermissionsV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRolesPermissionsV1Responses, UpdateRolesPermissionsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateRolesPermissionsV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateRolesPermissionsV1Response.parseAsync(data);
        },
        url: '/api/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createRoleV1 = <ThrowOnError extends boolean = true>(options: Options<CreateRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleV1Responses, CreateRoleV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zCreateRoleV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCreateRoleV1Response.parseAsync(data);
        },
        url: '/api/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const clearRolePermissionsCacheV1 = <ThrowOnError extends boolean = true>(options: Options<ClearRolePermissionsCacheV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClearRolePermissionsCacheV1Responses, ClearRolePermissionsCacheV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zClearRolePermissionsCacheV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zClearRolePermissionsCacheV1Response.parseAsync(data);
        },
        url: '/api/v1/roles/clear-cache',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteRoleV1 = <ThrowOnError extends boolean = true>(options: Options<DeleteRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleV1Responses, DeleteRoleV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteRoleV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDeleteRoleV1Response.parseAsync(data);
        },
        url: '/api/v1/roles/{role}',
        ...options
    });
};

export const viewRoleDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewRoleDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewRoleDetailV1Responses, ViewRoleDetailV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewRoleDetailV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewRoleDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/roles/{role}',
        ...options
    });
};

export const updateRoleV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateRoleV1Responses, UpdateRoleV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateRoleV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateRoleV1Response.parseAsync(data);
        },
        url: '/api/v1/roles/{role}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createFileV1 = <ThrowOnError extends boolean = true>(options: Options<CreateFileV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFileV1Responses, CreateFileV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zCreateFileV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCreateFileV1Response.parseAsync(data);
        },
        url: '/api/v1/files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const confirmFileUploadV1 = <ThrowOnError extends boolean = true>(options: Options<ConfirmFileUploadV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfirmFileUploadV1Responses, ConfirmFileUploadV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zConfirmFileUploadV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zConfirmFileUploadV1Response.parseAsync(data);
        },
        url: '/api/v1/files/{file}/confirm-upload',
        ...options
    });
};

export const downloadFileV1 = <ThrowOnError extends boolean = true>(options: Options<DownloadFileV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, DownloadFileV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDownloadFileV1Data.parseAsync(data);
        },
        url: '/api/v1/files/{file}/download',
        ...options
    });
};

export const viewContactIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewContactIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewContactIndexV1Responses, ViewContactIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewContactIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewContactIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts',
        ...options
    });
};

export const createContactV1 = <ThrowOnError extends boolean = true>(options: Options<CreateContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContactV1Responses, CreateContactV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zCreateContactV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCreateContactV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteContactV1 = <ThrowOnError extends boolean = true>(options: Options<DeleteContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContactV1Responses, DeleteContactV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteContactV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDeleteContactV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts/{uuid}',
        ...options
    });
};

export const viewContactDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewContactDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewContactDetailV1Responses, ViewContactDetailV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewContactDetailV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewContactDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts/{uuid}',
        ...options
    });
};

export const updateContactV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContactV1Responses, UpdateContactV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateContactV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateContactV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts/{uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const viewUiPreferencesV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewUiPreferencesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewUiPreferencesV1Responses, ViewUiPreferencesV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewUiPreferencesV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewUiPreferencesV1Response.parseAsync(data);
        },
        url: '/api/v1/me/ui-preferences',
        ...options
    });
};

export const updateUiPreferencesV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateUiPreferencesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUiPreferencesV1Responses, UpdateUiPreferencesV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateUiPreferencesV1Data.parseAsync(data);
        },
        url: '/api/v1/me/ui-preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createOneSignalTokenV1 = <ThrowOnError extends boolean = true>(options?: Options<CreateOneSignalTokenV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOneSignalTokenV1Responses, CreateOneSignalTokenV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zCreateOneSignalTokenV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCreateOneSignalTokenV1Response.parseAsync(data);
        },
        url: '/api/v1/onesignal/token',
        ...options
    });
};

export const sendPushNotificationV1 = <ThrowOnError extends boolean = true>(options: Options<SendPushNotificationV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendPushNotificationV1Responses, SendPushNotificationV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zSendPushNotificationV1Data.parseAsync(data);
        },
        url: '/api/v1/onesignal/push-notification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const viewDomainEventLogIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewDomainEventLogIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewDomainEventLogIndexV1Responses, ViewDomainEventLogIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewDomainEventLogIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewDomainEventLogIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/event-logs',
        ...options
    });
};

export const searchCollectionsV1 = <ThrowOnError extends boolean = true>(options: Options<SearchCollectionsV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchCollectionsV1Responses, SearchCollectionsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zSearchCollectionsV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zSearchCollectionsV1Response.parseAsync(data);
        },
        url: '/api/v1/search',
        ...options
    });
};

export const getMyNotificationPreferencesV1 = <ThrowOnError extends boolean = true>(options?: Options<GetMyNotificationPreferencesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyNotificationPreferencesV1Responses, GetMyNotificationPreferencesV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetMyNotificationPreferencesV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetMyNotificationPreferencesV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notification-preferences',
        ...options
    });
};

export const getNotificationTypesConfigV1 = <ThrowOnError extends boolean = true>(options?: Options<GetNotificationTypesConfigV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationTypesConfigV1Responses, GetNotificationTypesConfigV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetNotificationTypesConfigV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetNotificationTypesConfigV1Response.parseAsync(data);
        },
        url: '/api/v1/notification-preferences/config',
        ...options
    });
};

export const updateMyChannelNotificationPreferenceV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateMyChannelNotificationPreferenceV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMyChannelNotificationPreferenceV1Responses, UpdateMyChannelNotificationPreferenceV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateMyChannelNotificationPreferenceV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateMyChannelNotificationPreferenceV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notification-preferences/channels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const sendTestNotificationV1 = <ThrowOnError extends boolean = true>(options: Options<SendTestNotificationV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendTestNotificationV1Responses, SendTestNotificationV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zSendTestNotificationV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zSendTestNotificationV1Response.parseAsync(data);
        },
        url: '/api/v1/notifications/test-notification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMyNotificationsV1 = <ThrowOnError extends boolean = true>(options?: Options<GetMyNotificationsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyNotificationsV1Responses, GetMyNotificationsV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetMyNotificationsV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetMyNotificationsV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications',
        ...options
    });
};

export const viewUnreadNotificationsCountV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewUnreadNotificationsCountV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewUnreadNotificationsCountV1Responses, ViewUnreadNotificationsCountV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewUnreadNotificationsCountV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewUnreadNotificationsCountV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications/unread-count',
        ...options
    });
};

export const viewUserNotificationDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewUserNotificationDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewUserNotificationDetailV1Responses, ViewUserNotificationDetailV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewUserNotificationDetailV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewUserNotificationDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications/{notificationUuid}',
        ...options
    });
};

export const markAllNotificationAsReadV1 = <ThrowOnError extends boolean = true>(options?: Options<MarkAllNotificationAsReadV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<MarkAllNotificationAsReadV1Responses, MarkAllNotificationAsReadV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zMarkAllNotificationAsReadV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zMarkAllNotificationAsReadV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications/mark-as-read',
        ...options
    });
};

export const updateMyNotificationTypePreferenceV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateMyNotificationTypePreferenceV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMyNotificationTypePreferenceV1Responses, UpdateMyNotificationTypePreferenceV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateMyNotificationTypePreferenceV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateMyNotificationTypePreferenceV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notification-preferences/types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const markNotificationAsReadV1 = <ThrowOnError extends boolean = true>(options: Options<MarkNotificationAsReadV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarkNotificationAsReadV1Responses, MarkNotificationAsReadV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zMarkNotificationAsReadV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zMarkNotificationAsReadV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications/{notificationUuid}/mark-as-read',
        ...options
    });
};

export const markNotificationAsUnreadV1 = <ThrowOnError extends boolean = true>(options: Options<MarkNotificationAsUnreadV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarkNotificationAsUnreadV1Responses, MarkNotificationAsUnreadV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zMarkNotificationAsUnreadV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zMarkNotificationAsUnreadV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notifications/{notificationUuid}/mark-as-unread',
        ...options
    });
};

export const updateMyNotificationPreferencePresetV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateMyNotificationPreferencePresetV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMyNotificationPreferencePresetV1Responses, UpdateMyNotificationPreferencePresetV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateMyNotificationPreferencePresetV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateMyNotificationPreferencePresetV1Response.parseAsync(data);
        },
        url: '/api/v1/me/notification-preferences/preset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const migrateNotificationTypesV1 = <ThrowOnError extends boolean = true>(options: Options<MigrateNotificationTypesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MigrateNotificationTypesV1Responses, MigrateNotificationTypesV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zMigrateNotificationTypesV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zMigrateNotificationTypesV1Response.parseAsync(data);
        },
        url: '/api/v1/notifications/migrate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const viewJobsIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewJobsIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewJobsIndexV1Responses, ViewJobsIndexV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewJobsIndexV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewJobsIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/jobs',
        ...options
    });
};

export const viewJobDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewJobDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewJobDetailV1Responses, ViewJobDetailV1Errors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zViewJobDetailV1Data.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zViewJobDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/jobs/{jobId}',
        ...options
    });
};